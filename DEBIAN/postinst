#!/bin/sh

set -e
. /usr/share/debconf/confmodule
         
# variables
MYSQL=`which mysql`
CONFIG=/etc/ras/rasconfig.xml

# set permissions on the installed files
chown root:root /etc/ppp/*
chown root:root /etc/freeradius/sites-available/obiwan

# backup some files
cp /etc/network/interfaces /etc/network/interfaces.bak

# link the FreeRADIUS virtual server into the config
if [ ! -e /etc/freeradius/sites-enabled/obiwan ]
then
	ln -s /etc/freeradius/sites-available/obiwan /etc/freeradius/sites-enabled/obiwan
fi
if [ -e /etc/freeradius/sites-enabled/default ]
then
	rm /etc/freeradius/sites-enabled/default
fi

# setup the MySQL database
db_get obiwan/mysqlRootPassword
MYSQL_PASSWD=$RET
db_reset obiwan/mysqlRootPassword

echo "DROP DATABASE obiwan" | $MYSQL -u root -p$MYSQL_PASSWD || true
echo "DROP USER 'obiwan'@'localhost'" | $MYSQL -u root -p$MYSQL_PASSWD || true

echo "CREATE DATABASE obiwan" | $MYSQL -u root -p$MYSQL_PASSWD
echo "CREATE USER 'obiwan'@'localhost' IDENTIFIED BY 'obiwan'" | $MYSQL -u root -p$MYSQL_PASSWD
echo "GRANT ALL PRIVILEGES ON obiwan.* TO 'obiwan'@'localhost' WITH GRANT OPTION" | $MYSQL -u root -p$MYSQL_PASSWD

# insert the FreeRADIUS table schema
$MYSQL -u root -p$MYSQL_PASSWD obiwan < /etc/freeradius/sql/mysql/schema.sql
$MYSQL -u root -p$MYSQL_PASSWD obiwan < /etc/freeradius/sql/mysql/ippool.sql

# insert some default data for RAS use
$MYSQL -u root -p$MYSQL_PASSWD obiwan < /etc/ras/default.sql

# enable the FreeRADIUS MySQL modules (sql/sqlippool)
sed -i.bak "/$INCLUDE sql.conf/ s/# *//" /etc/freeradius/radiusd.conf
sed -i "/$INCLUDE sqlippool.conf/ s/# *//" /etc/freeradius/radiusd.conf

# point to the correct MySQL database
sed -i.bak "s/login = \"radius\"/login = \"obiwan\"/" /etc/freeradius/sql.conf
sed -i "s/password = \"radpass\"/password = \"obiwan\"/" /etc/freeradius/sql.conf
sed -i "s/radius_db = \"radius\"/radius_db = \"obiwan\"/" /etc/freeradius/sql.conf

# update the sqlippool config
sed -i.bak "s/$INCLUDE sql\/postgresql\/ippool.conf/$INCLUDE sql\/mysql\/ippool.conf/" /etc/freeradius/sqlippool.conf

# add configuration for networking
for INTF in `ip link | grep BROADCAST | awk '{print $2}'| awk '{split($0,a,"@"); print a[1]}' | sed s/://g`
do

	# add the interface to the config
	xmlstarlet ed -L -s "/config/interfaces" \
		-t elem -n "interface_tmp" -v "" \
		-i "//interface_tmp" \
		-t attr -n "name" -v "$INTF" \
		-r "//interface_tmp" -v interface $CONFIG

done

# update dnsmasq config to prevent forwarding to resolvconf
sed -i "/$IGNORE_RESOLVCONF=yes/ s/# *//" /etc/default/dnsmasq
echo "nameserver 8.8.8.8" > /etc/resolv.dnsmasq
echo "nameserver 127.0.0.1" > /etc/resolv.conf


# add specific configuration
db_get obiwan/intfSelect
WAN_INTF=$RET

db_get obiwan/intfModeSelect
WAN_INTF_MODE=$RET

# add IPv4 config to the interface
xmlstarlet ed -L -s "/config/interfaces/interface[@name='$WAN_INTF']" -t elem -n ipv4 -v "" $CONFIG

# if static IP is required, add the details
if [ $WAN_INTF_MODE = "Static" ]
then
	# get the address/netmask from debconf
	db_get obiwan/intfStaticAddress
	WAN_INTF_ADDRESS=$RET
	db_get obiwan/intfStaticNetmask
	WAN_INTF_NETMASK=$RET
	db_get obiwan/intfStaticGateway
	WAN_INTF_GATEWAY=$RET
	
	# add the address/netmask to the config
	xmlstarlet ed -L -s "/config/interfaces/interface[@name='$WAN_INTF']/ipv4" -t elem -n "address" -v "$WAN_INTF_ADDRESS" $CONFIG
	xmlstarlet ed -L -s "/config/interfaces/interface[@name='$WAN_INTF']/ipv4" -t elem -n "netmask" -v "$WAN_INTF_NETMASK" $CONFIG
	
	# add the route to the interface
	if [ "$WAN_INTF_GATEWAY" != "" ]
	then
		xmlstarlet ed -L -s "/config/interfaces/interface[@name='$WAN_INTF']" -t elem -n "route_tmp" -v "" $CONFIG
		xmlstarlet ed -L -s "/config/interfaces/interface[@name='$WAN_INTF']/route_tmp" -t attr -n "dest" -v "0.0.0.0/0" $CONFIG
		xmlstarlet ed -L -s "/config/interfaces/interface[@name='$WAN_INTF']/route_tmp" -t attr -n "next-hop" -v "$WAN_INTF_GATEWAY" $CONFIG
		xmlstarlet ed -L -r "//route_tmp" -v "route" $CONFIG
	fi
fi

# add masquerading to the firewall config
xmlstarlet ed -L -s "/config/firewall" -t elem -n "rule_tmp" -v "" $CONFIG
xmlstarlet ed -L -s "/config/firewall/rule_tmp" -t attr -n "table" -v "nat" $CONFIG
xmlstarlet ed -L -s "/config/firewall/rule_tmp" -t attr -n "chain" -v "POSTROUTING" $CONFIG
xmlstarlet ed -L -s "/config/firewall/rule_tmp" -t elem -n "egress" -v "$WAN_INTF" $CONFIG
xmlstarlet ed -L -s "/config/firewall/rule_tmp" -t elem -n "target" -v "masquerade" $CONFIG
xmlstarlet ed -L -r "//rule_tmp" -v "rule" $CONFIG

# restart services
service rasconfig restart || true
service networking restart || true
service dnsmasq restart || true
service freeradius restart || true

# end the script
db_stop
